var setval = require('setval')
var yo = require('yo-yo')
var csjs = require('csjs-inject')
var Treeview = require('ethereum-remix').ui.TreeView

var css = csjs`
  .treeview {
    display: block;
    margin-top: 7px;
    width: 20%;
  }
  .folder, .file {
    font-size: 14px;
  }
  .hasFocus {
    background-color: #F4F6FF;
  }
  .rename {
    background-color: yellow;
  }
  .remove, .save {
    align-self: center;
    margin-right: 3%;
  }
  .activeMode {
    display: flex;
    justify-content: space-between;
  }
  ul {
    padding: 0;
  }
`
module.exports = fileExplorer

function fileExplorer (container, files, editor) {

  container.className = css.treeview

  var sources = {
    'test/client/credit.sol': '',
    'src/voting.sol': '',
    'src/leasing.sol': '',
    'src/gmbh/contract.sol': false,
    'src/gmbh/test.sol': false,
    'src/gmbh/company.sol': false,
    'src/gmbh/node_modules/ballot.sol': false,
    'src/ug/finance.sol': false,
    'app/solidity/mode.sol': true,
    'app/ethereum/constitution.sol': true
  }
  Object.keys(sources).forEach(function (key) { files.set(key, sources[key]) })

  var deleteButton = yo`<span class=${css.remove} onload=${showIcons} onunload=${hideIcons} onclick=${deletePath}><i class="fa fa-trash" aria-hidden="true"></i></span>`
  var saveButton = yo`<span class=${css.save} nload=${showIcons} onunload=${hideIcons} onclick=${savePath}><i class="fa fa-floppy-o" aria-hidden="true"></i></span>`

  function showIcons (node) {
    node.parentElement.classList.add(css.activeMode)
  }
  function hideIcons (node) {
    node.parentElement.classList.remove(css.activeMode)
  }

  // files.event.register('fileChanged', function (filepath) { })
  // files.event.register('fileAdded', function (filepath) {
  //   console.log('fileAdded', filepath)
  // })
  files.event.register('fileFocus', function (path) {
    if (filepath == path) return
    filepath = path
    var el = getElement(filepath)
    var tmp = el
    while ((tmp = tmp.parentElement.parentElement) && tmp.tagName === 'LI') {
      var caret = tmp.firstChild.firstChild
      if (caret.classList.contains('fa-caret-right')) caret.click() // expand
    }
    el.click() // focus element
  })
  files.event.register('fileRemoved', function (filepath) {
    console.log('fileRemoved', filepath)
  })
  // files.event.register('fileRenamed', function (oldName, newName) {
  //   console.log('fileRenamed', filepath, arguments)
  // })

  var filenames = files.list()
  var data = { }
  Object.keys(filenames).forEach(file => setval(data, file, true))
  var filepath = null
  var focusElement = null

  var tv = new Treeview({
    extractData: function (subtree, tree, key) {
      return {
        children: subtree instanceof Array ? subtree.map((item, index) => ({
          key: index, value: item
        })) : subtree instanceof Object ? Object.keys(subtree).map(key => ({
          key: key, value: subtree[key]
        })) : undefined
      }
    },
    formatSelf: function (key, data) {
      return yo`<label class=${data.children ? css.folder : css.file}
        onload=${function(el){addHover(el)+addFocus.call(focus,el)}}
        onunload=${function(el){removeHover(el)+removeFocus.call(focus,el)}}
        onclick=${editMode}
        onblur=${cancelEdit}
      >${key}</label>`
    }
  })

  container.appendChild(tv.render(data))
  var api = { }

  return api
  /******************************************************************************
    HELPER FUNCTIONS (per instance)
  ******************************************************************************/
  function focus (event) {
    event.cancelBubble = true
    if (focusElement === this) return
    if (focusElement) toggleFocus(focusElement, deleteButton)
    focusElement = this
    toggleFocus(focusElement, deleteButton)
    var filepath = getPath(focusElement).file
    if (filepath) files.event.trigger('fileFocus', [filepath])
  }
  function getPath (el) { return getPathRoot(container, el) }
  function getElement (path) { return getElementRoot(container, path) }
  function deletePath (event) {
    var el = this.parentElement.parentElement
    var path = getPath(el)
    path = path.file || path.folder
    el.parentElement.removeChild(el)
    removeSubtree(files, path)
  }
  function editMode (event) {
    var classes = this.parentElement.parentElement.parentElement.className
    if (~classes.indexOf('hasFocus') && !this.getAttribute('contenteditable')) {
      console.log('edit mode')
      this.setAttribute('contenteditable', true)
      this.classList.toggle(css.rename)
      this.focus()
      var node = this.parentElement.parentElement
      node.removeChild(deleteButton)
      node.appendChild(saveButton)
    }
  }
  function cancelEdit (event) {
    console.log('cancel edit')
    this.removeAttribute('contenteditable')
    this.classList.toggle(css.rename)
    var node = this.parentElement.parentElement
    node.removeChild(saveButton)
    node.appendChild(deleteButton)
  }
  function savePath (event) {
    console.log('@TODO: save path')
    var node = this.parentElement.parentElement
    node.removeChild(saveButton)
    node.appendChild(deleteButton)
  }
}
/******************************************************************************
  HELPER FUNCTIONS
******************************************************************************/
function removeSubtree (files, path) {
  var allPaths = Object.keys(files.list())
  var remove = allPaths.filter(function keep (p) { return ~p.indexOf(path) })
  remove.forEach(function (p) { files.remove(p) })
}
function toggleFocus (el, button) {
  var hasFocus = el.classList.toggle(css.hasFocus)
  if (hasFocus) el.children[0].appendChild(button)
  else el.children[0].removeChild(button)
}

function addHover (el) {
  console.log('add hover')
}
function removeHover (el) {
  console.log('remove hover')
}
function addFocus (node) {
  console.log('add focus')
  node = node.parentElement.parentElement.parentElement
  node.addEventListener('click', this)
}

function removeFocus (node) {
  console.log('remove focus')
  node = node.parentElement.parentElement.parentElement
  node.removeEventListener('click', this)
}

function getElementRoot (container, path) {
  path = path.split('/')
  var lis = container.children[0].children
  return getElementRecursive(path, lis)
}

function getElementRecursive (path, lis) {
  var current = path.shift()
  if (path.length) {
    lis = [].slice.call(lis)
      .map(toFolderEl)
      .filter(keepNonNull)
      .filter(function keep (el) { return el.innerText === current})[0]
      .parentElement.parentElement.parentElement.lastChild.children
    return getElementRecursive(path, lis)
  }
  return [].slice.call(lis).filter(function (el) { return toFileName(el) === current })[0]
}

function getPathRoot (container, el) {
  var folder = toFolderName(el)
  var file = toFileName(el)
  var elPath = []
  while ((el = el.parentElement) && el !== container) elPath.unshift(el)
  elPath = elPath.filter(keepNotUL).map(toFolderName).concat([folder||file]).join('/')
  return folder ? { folder: elPath } : { file: elPath }
}

function keepNotUL (el) { return el.tagName !== 'UL' }

function keepNonNull (el) { return el !== null }

function toFolderEl (li) {
  return li.firstChild.querySelector('label[class^="folder"]')
}

function toFolderName (el) {
  return (el.querySelector('label[class^="folder"]')||{}).innerText
}
function toFileName (el) {
  return (el.querySelector('label[class^="file"]')||{}).innerText
}
