var yo     = require('yo-yo')
var csjs   = require('csjs-inject')
var getval = require('getval')
var setval = require('setval')

var css = csjs`
  .container              {
    display               : flex;
    flex-direction        : column;
    margin-left           : 10px;
  }
  .node                   {
    vertical-align        : top;
    font-family           : 'arial,sans-serif';
  }
  .hasFocus               {
    background-color      : pink;
  }
  .caret                  {
    position              : absolute;
    margin-top            : 3px;
  }
  .data                   {
    margin-left           : 10px;
  }
  .subtree                {
    margin-left           : 0px;
  }
  .isClosed               {
    display               : none;
  }
  .isOpened               {
    display               : block;
  }
`
css['caretBase']  = 'fa'
css['caretDown']  = 'fa-caret-down'
css['caretRight'] = 'fa-caret-right'

module.exports = function fileExplorer (options) {
  options || (options = {})
  var { files, editor } = options
  for (selector in options.css) { if (!css[selector]) throw new Error(`
    given:
      ".${selector}"
    supported css selectors:
      ".${Object.keys(css).join('"\n      ".')}"
  `) }
  var formatNode   = options.formatNode || formatNodeDefault
  var getMeta      = options.getMeta    || getMetaDefault
  var data         = { keyPath: [], value: {} }
  var focusElement = null
  Object.keys(files.list()).forEach(file => setval(data.value, file, true))
  return yo`<div class=${css.subtree}>${getNodes(data, getMeta).map(renderNode)}</div>`
  function focus () {
    if (focusElement) focusElement.classList.toggle(css.hasFocus)
    focusElement = this
    focusElement.classList.toggle(css.hasFocus)
  }
  function renderNode (data) {
    var renderedChildren = getNodes(data, getMeta).map(renderNode) // @NOTE: recursion
    if (renderedChildren.length) {
      var caret = yo`<label class="${css.caretBase} ${css.caretRight} ${css.caret}"></label>`
      var children = yo`<div class="${css.subtree} ${css.isClosed}">${renderedChildren}</div>`
    }
    var data = yo`<span class=${css.data}>${formatNode(data)}</span>`
    return renderedChildren.length ? yo`
      <div class=${css.container}>
        <span class=${css.node} onclick=${toggleExpand}>${caret}${data}</span>
        ${children}
      </div>
    ` : yo`<div class=${css.container}><span class=${css.node} onclick=${focus}>${data}</span></div>`
    function toggleExpand (event) {
      focus.call(this, event)
      caret.classList.toggle(css.caretDown)
      caret.classList.toggle(css.caretRight)
      children.classList.toggle(css.isOpened)
      children.classList.toggle(css.isClosed)
    }
  }
}
function formatNodeDefault (data) { return yo`<label>${data.key}: ${data.meta}</label>` }
function getNodes ({ keyPath, value: item } = {}, getMeta) {
  return item instanceof Array ? item.map((item, index) => ({
    keyPath: keyPath.concat(index), key: index, value: item,
    meta: getMeta(keyPath.concat(index), index, item)
  })) : item instanceof Object ? Object.keys(item).map(key => ({
    keyPath: keyPath.concat(key), key: key, value: item[key],
    meta: getMeta(keyPath.concat(key), key, item[key])
  })) : []
}
function getMetaDefault (keyPath, name, item) {
  return item instanceof Array ? 'Array' : item instanceof Object?'Object':''
}
